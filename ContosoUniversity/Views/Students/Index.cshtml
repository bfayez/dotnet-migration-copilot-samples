@model PaginatedList<ContosoUniversity.Models.Student>

@{
    ViewBag.Title = "Students";
}

<h2>Students</h2>

<p>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary" })
</p>

@using (Html.BeginForm("Index", "Students", FormMethod.Get))
{
    <div class="form-actions no-color">
        <p>
            Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
            <input type="submit" value="Search" class="btn btn-default" /> |
            @Html.ActionLink("Back to Full List", "Index")
        </p>
    </div>
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Last Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>
                First Name
            </th>
            <th>
                @Html.ActionLink("Enrollment Date", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstMidName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EnrollmentDate)
                </td>
                <td>
                    @Html.ActionLink("Details", "Details", new { id = item.ID }, new { @class = "btn btn-info btn-sm" })
                    @Html.Raw(" | ")
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID }, new { @class = "btn btn-warning btn-sm" })
                    @Html.Raw(" | ")
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID }, new { @class = "btn btn-danger btn-sm" })
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

@Html.ActionLink("Previous", "Index", new { 
    sortOrder = ViewBag.CurrentSort, 
    page = Model.PageIndex - 1, 
    currentFilter = ViewBag.CurrentFilter 
}, new { @class = "btn btn-default " + prevDisabled })

@Html.ActionLink("Next", "Index", new { 
    sortOrder = ViewBag.CurrentSort, 
    page = Model.PageIndex + 1, 
    currentFilter = ViewBag.CurrentFilter 
}, new { @class = "btn btn-default " + nextDisabled })
